apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

def isCi = "true".equals(System.getenv("CI"))

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'
    useLibrary 'org.apache.http.legacy'
    defaultConfig {
        applicationId "com.wagerr.wallet"
        minSdkVersion 21
        targetSdkVersion 25
        versionCode 5
        versionName "1.0.1-beta.4"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        archivesBaseName = "WagerrWallet_v-$versionName-${releaseTime()}"
        multiDexEnabled true
    }

    lintOptions {
        abortOnError false
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }
    signingConfigs {
        release
    }
    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    flavorDimensions "env"
    productFlavors {
        wgrprod {
            dimension "env"
            addManifestPlaceholders([APP_NAME: "@string/app_name"])
            versionNameSuffix "-wgrprod"
            resValue 'color', "colorPrimary", "#d91b1b"
            resValue 'color', "colorPrimaryLight", "#ea3232"
            resValue 'color', "colorPrimaryDark", "#8c0000"
        }
        wgrtest {
            dimension "env"
            addManifestPlaceholders([APP_NAME: "@string/test_app_name"])
            versionNameSuffix "-wgrtest"
            applicationIdSuffix ".wgrtest"
            resValue 'color', "colorPrimary", "#00DD70"
            resValue 'color', "colorPrimaryLight", "#FF05FF84"
            resValue 'color', "colorPrimaryDark", "#00783c"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/INDEX.LIST'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
    }
    sourceSets{
        main{
            assets.srcDirs = ['assets']
            jni {
                srcDirs = []
            }

            jniLibs {
                srcDir 'libs'
            }
        }
    }

    configurations {
        all {
            exclude module: 'httpclient'
        }
    }


}


configurations.all {
    resolutionStrategy { force 'org.objenesis:objenesis:2.1' }

}


def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

//使用独立的signing.propreties保存签名信息
def File propFile = file('signing.properties');
if (isCi) {
    android.signingConfigs.release.storeFile = file('../key.jks')
    android.signingConfigs.release.storePassword = System.getenv("STORE_PASSWORD")
    android.signingConfigs.release.keyAlias = System.getenv('KEY_ALIAS')
    android.signingConfigs.release.keyPassword = System.getenv('KEY_PASSWORD')
} else if (propFile.exists()) {
    def Properties props = new Properties()
    props.load(new FileInputStream(propFile))
    if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        def keystoreFile = file(props["STORE_FILE"])
        if (keystoreFile.canRead()) {
            android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
            android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
            android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
            android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
        } else {
            println("keystore file not found: " + props["KEYSTORE_FILE"])
            android.buildTypes.release.signingConfig = null
        }
    } else {
        println("signing.properties found but some entries missing")
        android.buildTypes.release.signingConfig = null
    }
} else {
    println("signing.properties not found: ")
    android.buildTypes.release.signingConfig = null
}

dependencies {
    //compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    //support
    implementation 'com.android.support:appcompat-v7:27.0.2'
    implementation 'com.android.support:design:27.0.2'
    implementation 'com.android.support.constraint:constraint-layout:1.1.0-beta4'
    compile 'com.android.support.constraint:constraint-layout:1.0.1'
    compile 'com.android.support:recyclerview-v7:27.0.2'
    compile 'com.android.support:cardview-v7:27.0.2'
    compile 'com.wang.avi:library:2.1.3'
    compile 'com.google.android:flexbox:0.3.0'
    compile 'za.co.riggaroo:materialhelptutorial:1.2.0'
    compile('com.github.tony19:logback-android-classic:1.1.1-5') {
        exclude(group: 'com.google.android', module: 'android')
    }
    compile 'com.github.anrwatchdog:anrwatchdog:1.3.0'
    //qr
    compile 'com.google.zxing:core:3.3.0'
    // db
    compile 'com.snappydb:snappydb-lib:0.5.2'
    compile 'ch.acra:acra:4.9.2'
    //compile 'com.bugsee:bugsee-android:+'
    compile project(':wagerr-light-wallets-core')
    testCompile project(':wagerr-light-wallets-core')
    compile 'com.github.clans:fab:1.6.4'
    testCompile 'org.slf4j:slf4j-api:1.7.20'
    testCompile 'org.slf4j:slf4j-simple:1.7.5'
    testCompile 'junit:junit:4.12'
    testCompile 'org.apache.httpcomponents:httpclient:4.5.3'
    testCompile 'org.mockito:mockito-core:2.8.9'

    //rxjava2
    implementation "io.reactivex.rxjava2:rxjava:2.1.8"
    implementation 'io.reactivex.rxjava2:rxkotlin:2.2.0'
    implementation "io.reactivex.rxjava2:rxandroid:2.0.1"
    //recyclerview adapter
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.34'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions.kotlin}"

    compile 'com.github.hackware1993:MagicIndicator:1.5.0'
    //okhttp
    implementation 'com.squareup.okhttp3:okhttp:3.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.9.0'
    //retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'

}
